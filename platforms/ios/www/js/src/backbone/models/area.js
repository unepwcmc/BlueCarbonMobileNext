// Generated by CoffeeScript 1.7.1
(function() {
  var _base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Models || (_base.Models = {});

  BlueCarbon.Models.Area = (function(_super) {
    __extends(Area, _super);

    function Area() {
      return Area.__super__.constructor.apply(this, arguments);
    }

    Area.prototype.schema = function() {
      return "id INTEGER, title TEXT, coordinates TEXT, mbtiles TEXT, error TEXT, PRIMARY KEY (id)";
    };

    Area.prototype.defaults = {
      downloadingTiles: false
    };

    Area.prototype.downloadState = function() {
      var layer, _i, _len, _ref;
      if (this.get('downloadingTiles')) {
        return "downloading";
      }
      _ref = this.get('mbtiles');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.status === 'pending' || layer.status === 'generating') {
          return 'data generating';
        }
        if (layer.downloadedAt == null) {
          return 'no data';
        }
        if (layer.downloadedAt < Date.parse(layer.last_generated_at)) {
          return 'out of date';
        }
      }
      return "ready";
    };

    Area.prototype.lastDownloaded = function() {
      var layer, lowestDownloaded, _i, _len, _ref;
      lowestDownloaded = "";
      _ref = this.get('mbtiles');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.downloadedAt != null) {
          if (!_.isNumber(lowestDownloaded) || layer.downloadedAt < lowestDownloaded) {
            lowestDownloaded = layer.downloadedAt;
          }
        }
      }
      if ((typeof lowestDownloaded) === 'string') {
        return "";
      } else {
        lowestDownloaded = new Date(lowestDownloaded);
        return "" + (lowestDownloaded.getFullYear()) + "/" + (lowestDownloaded.getMonth() + 1) + "/" + (lowestDownloaded.getDate());
      }
    };

    Area.prototype.filenameForLayer = function(layer, absolute) {
      var name;
      if (absolute == null) {
        absolute = true;
      }
      name = "";
      if (absolute) {
        name += "" + cordova.file.documentsDirectory;
      }
      name += "" + (this.get('id')) + "-" + layer.habitat + "-" + layer.downloadedAt + ".mbtiles";
      return name;
    };

    Area.prototype.tileLayers = function() {
      var layer, layers, _i, _len, _ref;
      layers = [];
      _ref = this.get('mbtiles');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layers.push({
          name: this.parseLayerName(layer.habitat),
          mbtileLocation: this.filenameForLayer(layer, false)
        });
      }
      return layers;
    };

    Area.prototype.parseLayerName = function(name) {
      name = name.replace("_", " ");
      return _.map(name.split(" "), function(name) {
        return name.charAt(0).toUpperCase() + name.slice(1);
      }).join(" ");
    };

    Area.prototype.coordsAsLatLngArray = function() {
      var latLngs, point, _i, _len, _ref;
      latLngs = [];
      _ref = this.get('coordinates');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        latLngs.push(new L.LatLng(point[1], point[0]));
      }
      latLngs.push(latLngs[0]);
      return latLngs;
    };

    Area.prototype.bounds = function() {
      return L.latLngBounds(this.coordsAsLatLngArray());
    };

    Area.prototype.parse = function(data) {
      try {
        data.coordinates = JSON.parse(data.coordinates);
      } catch (_error) {}
      return data;
    };

    Area.prototype.toJSON = function(options) {
      return _.omit(this.attributes, ['downloadingTiles']);
    };

    return Area;

  })(Backbone.SyncableModel);

}).call(this);
