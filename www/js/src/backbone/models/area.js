// Generated by CoffeeScript 1.9.0
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Models || (_base.Models = {});

  BlueCarbon.Models.Area = (function(_super) {
    __extends(Area, _super);

    function Area() {
      this.layerDownloaded = __bind(this.layerDownloaded, this);
      this.downloadTiles = __bind(this.downloadTiles, this);
      this.downloadLayers = __bind(this.downloadLayers, this);
      this.downloadData = __bind(this.downloadData, this);
      this.downloadLayer = __bind(this.downloadLayer, this);
      return Area.__super__.constructor.apply(this, arguments);
    }

    Area.prototype.schema = function() {
      return "id INTEGER, title TEXT, coordinates TEXT, mbtiles TEXT, error TEXT, PRIMARY KEY (id)";
    };

    Area.prototype.downloadLayer = function(layer, callback) {
      var boundError, boundSuccess, ft;
      this.pendingDownloads.push(layer.habitat);
      boundSuccess = ((function(_this) {
        return function() {
          var _layer;
          _layer = layer;
          return function(fileEntry) {
            _this.layerDownloaded(_layer, fileEntry);
            return callback();
          };
        };
      })(this))();
      boundError = ((function(_this) {
        return function() {
          var _layer;
          _layer = layer;
          return function(error) {
            console.log("unable to download " + _layer.habitat);
            _this.pendingDownloads.splice(_this.pendingDownloads.indexOf(layer.habitat), 1);
            console.log(error);
            return callback(error);
          };
        };
      })(this))();
      ft = new FileTransfer();
      return ft.download(layer.url, this.filenameForLayer(layer), boundSuccess, boundError);
    };

    Area.prototype.downloadData = function(_at_offlineLayer, callback) {
      this.offlineLayer = _at_offlineLayer;
      this.pendingDownloads = [];
      return async.parallel([this.downloadLayers, this.downloadTiles], callback);
    };

    Area.prototype.downloadLayers = function(callback) {
      return async.map(this.get('mbtiles'), this.downloadLayer, callback);
    };

    Area.prototype.downloadTiles = function(callback) {
      return this.offlineLayer.saveTiles(17, (function(_this) {
        return function() {
          return _this.downloadingTiles = true;
        };
      })(this), (function(_this) {
        return function() {
          _this.downloadingTiles = false;
          alert('Saved cache');
          return callback();
        };
      })(this), (function(_this) {
        return function(error) {
          _this.downloadingTiles = false;
          console.log(error);
          alert('Could not save cache');
          return callback(error);
        };
      })(this));
    };

    Area.prototype.layerDownloaded = function(layer, fileEntry) {
      var index, mbTiles, storedLayer, _i, _len;
      console.log("downloaded " + layer.habitat);
      this.pendingDownloads.splice(this.pendingDownloads.indexOf(layer.habitat), 1);
      layer.downloadedAt = (new Date()).getTime();
      mbTiles = this.get('mbtiles');
      for (index = _i = 0, _len = mbTiles.length; _i < _len; index = ++_i) {
        storedLayer = mbTiles[index];
        if (storedLayer.habitat === layer.habitat) {
          mbTiles[index] = layer;
        }
      }
      this.set('mbtiles', mbTiles);
      return this.localSave();
    };

    Area.prototype.downloadState = function() {
      var layer, _i, _len, _ref, _ref1;
      if (((_ref = this.pendingDownloads) != null ? _ref.length : void 0) > 0 || this.downloadingTiles) {
        return "downloading";
      }
      _ref1 = this.get('mbtiles');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        layer = _ref1[_i];
        if (layer.status === 'pending' || layer.status === 'generating') {
          return 'data generating';
        }
        if (layer.downloadedAt == null) {
          return 'no data';
        }
        if (layer.downloadedAt < Date.parse(layer.last_generated_at)) {
          return 'out of date';
        }
      }
      return "ready";
    };

    Area.prototype.lastDownloaded = function() {
      var layer, lowestDownloaded, _i, _len, _ref;
      lowestDownloaded = "";
      _ref = this.get('mbtiles');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.downloadedAt != null) {
          if (!_.isNumber(lowestDownloaded) || layer.downloadedAt < lowestDownloaded) {
            lowestDownloaded = layer.downloadedAt;
          }
        }
      }
      if ((typeof lowestDownloaded) === 'string') {
        return "";
      } else {
        lowestDownloaded = new Date(lowestDownloaded);
        return (lowestDownloaded.getFullYear()) + "/" + (lowestDownloaded.getMonth() + 1) + "/" + (lowestDownloaded.getDate());
      }
    };

    Area.prototype.tileLayers = function() {
      var layer, layers, _i, _len, _ref;
      layers = [];
      _ref = this.get('mbtiles');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layers.push({
          name: this.parseLayerName(layer.habitat),
          mbtileLocation: this.filenameForLayer(layer, false)
        });
      }
      return layers;
    };

    Area.prototype.parseLayerName = function(name) {
      name = name.replace("_", " ");
      return _.map(name.split(" "), function(name) {
        return name.charAt(0).toUpperCase() + name.slice(1);
      }).join(" ");
    };

    Area.prototype.coordsAsLatLngArray = function() {
      var latLngs, point, _i, _len, _ref;
      latLngs = [];
      _ref = this.get('coordinates');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        latLngs.push(new L.LatLng(point[1], point[0]));
      }
      latLngs.push(latLngs[0]);
      return latLngs;
    };

    Area.prototype.parse = function(data) {
      try {
        data.coordinates = JSON.parse(data.coordinates);
      } catch (_error) {}
      return data;
    };

    return Area;

  })(Backbone.SyncableModel);

}).call(this);
