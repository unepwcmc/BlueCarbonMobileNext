// Generated by CoffeeScript 1.7.1
(function() {
  var _base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Models || (_base.Models = {});

  BlueCarbon.Models.Validation = (function(_super) {
    __extends(Validation, _super);

    function Validation() {
      return Validation.__super__.constructor.apply(this, arguments);
    }

    Validation.prototype.url = 'http://bluecarbon.unepwcmc-012.vm.brightbox.net/validations.json';

    Validation.prototype.schema = function() {
      return "sqlite_id INTEGER PRIMARY KEY, id INTEGER, coordinates TEXT, action TEXT, area_id INTEGER, user_id INTEGER, density TEXT, age TEXT, habitat TEXT, condition TEXT, species TEXT, recorded_at TEXT, notes TEXT";
    };

    Validation.prototype.name = function() {
      return "" + (this.get('habitat')) + " - " + (this.get('action')) + " ( " + (this.get('recorded_at').replace(/-/g, '/')) + ")";
    };

    Validation.prototype.toJSON = function(forRails) {
      var json;
      if (forRails == null) {
        forRails = true;
      }
      json = Validation.__super__.toJSON.apply(this, arguments);
      if (forRails) {
        return {
          validation: json
        };
      } else {
        return json;
      }
    };

    Validation.prototype.setGeomFromPoints = function(points) {
      var point;
      points = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = points.length; _i < _len; _i++) {
          point = points[_i];
          _results.push([point.lng, point.lat]);
        }
        return _results;
      })();
      points.push(points[0]);
      return this.set('coordinates', points);
    };

    Validation.prototype.geomAsLatLngArray = function() {
      var latLngs, point, _i, _len, _ref;
      latLngs = [];
      _ref = this.get('coordinates');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        latLngs.push(new L.LatLng(point[1], point[0]));
      }
      return latLngs;
    };

    Validation.prototype.getHumanAttributes = function() {
      var humanAttributes, key, keysToRemove, value, _i, _len;
      humanAttributes = _.clone(this.attributes);
      keysToRemove = ["coordinates", "sqlite_id", "area_id", "recorded_at"];
      for (key in humanAttributes) {
        value = humanAttributes[key];
        if (value == null) {
          keysToRemove.push(key);
        }
        if (this.humanEnumMap[key] != null) {
          humanAttributes[key] = this.humanEnumMap[key][value];
        }
      }
      for (_i = 0, _len = keysToRemove.length; _i < _len; _i++) {
        key = keysToRemove[_i];
        delete humanAttributes[key];
      }
      return humanAttributes;
    };

    Validation.prototype.humanEnumMap = {
      density: {
        1: "Sparse (<20% cover)",
        2: "Moderate (20-50% cover)",
        3: "Dense (50-80% cover)",
        4: "Very dense (>80% cover)"
      },
      condition: {
        1: "UndisturbedÂ / Intact",
        2: "Degraded",
        3: "Restored / Rehabilitating",
        4: "Afforested/ Created",
        5: "Cleared"
      },
      age: {
        1: "Natural Mangrove",
        2: "2-10 yrs old",
        3: "10-25 yrs old",
        4: "25-50 yrs old"
      }
    };

    return Validation;

  })(Backbone.SyncableModel);

}).call(this);
