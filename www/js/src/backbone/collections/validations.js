// Generated by CoffeeScript 1.7.1
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Collections || (_base.Collections = {});

  BlueCarbon.Collections.Validations = (function(_super) {
    __extends(Validations, _super);

    function Validations() {
      this.doSqliteSync = __bind(this.doSqliteSync, this);
      return Validations.__super__.constructor.apply(this, arguments);
    }

    Validations.prototype.model = BlueCarbon.Models.Validation;

    Validations.prototype.initialize = function(models, options) {
      this.area = options.area;
      return Validations.__super__.initialize.apply(this, arguments);
    };

    Validations.prototype.doSqliteSync = function(method, collection, options) {
      var sql;
      sql = "";
      switch (method) {
        case "read":
          sql = "SELECT *\nFROM " + collection.model.prototype.constructor.name + "\nWHERE area_id=\"" + (collection.area.get('id')) + "\";";
      }
      return BlueCarbon.SQLiteDb.transaction((function(_this) {
        return function(tx) {
          return tx.executeSql(sql, [], function(tx, results) {
            return options.success.call(_this, results, 'success', tx);
          });
        };
      })(this), (function(_this) {
        return function(tx, error) {
          return options.error.apply(_this, arguments);
        };
      })(this));
    };

    Validations.prototype.pushToServer = function(successCallback, errorCallback) {
      var errors, modelCount, onValidationPushed, successes;
      successes = [];
      errors = [];
      modelCount = this.models.length;
      onValidationPushed = function(validation, state, validationErrors) {
        if ((successCallback == null) && (errorCallback == null)) {
          return;
        }
        if (state === 'success') {
          successes.push(validation);
        } else {
          errors.push({
            validation: validation,
            error: validationErrors
          });
        }
        if (modelCount === (successes.length + errors.length)) {
          if (errors.length > 0) {
            if (errorCallback != null) {
              return errorCallback(errors);
            }
          } else {
            if (successCallback != null) {
              return successCallback(successes);
            }
          }
        }
      };
      return this.each(function(validation) {
        return validation.save({}, {
          success: function() {
            onValidationPushed(validation, 'success');
            return validation.localDestroy({
              error: function(a, b, c) {
                console.log("failed to delete area with:");
                return console.log(arguments);
              }
            });
          },
          error: function(errorModel, response) {
            var error;
            console.log("failed to upload area with:");
            console.log(arguments);
            error = response.responseText;
            try {
              error = JSON.parse(error);
            } catch (_error) {}
            return onValidationPushed(validation, 'error', error);
          }
        });
      });
    };

    return Validations;

  })(Backbone.SyncableCollection);

}).call(this);
