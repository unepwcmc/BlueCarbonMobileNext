// Generated by CoffeeScript 1.9.0
(function() {
  describe("DownloadService", function() {
    it("should be a thing that exists", function() {
      return expect(DownloadService).toBeDefined();
    });
    it("given an area, stores the area as an instance variable", function() {
      var area, service;
      area = {};
      service = new DownloadService(area);
      return expect(service.area).toBe(area);
    });
    beforeEach(function() {
      return window.cordova = {
        file: {
          documentsDirectory: "/User/Lieferschein/Documents/"
        }
      };
    });
    describe(".downloadHabitatTiles()", function() {
      beforeEach(function() {
        this.area = new BlueCarbon.Models.Area({
          id: 12
        });
        this.service = new DownloadService(this.area);
        this.layer = {
          habitat: "seagrass",
          url: "http://seagrass.com/api/seagrass.json"
        };
        return window.FileTransfer = function() {};
      });
      it("given a habitat layer object, downloads the mbtiles file for the habitat and saves to the file system", function(done) {
        var spy;
        FileTransfer.prototype = {
          download: function(url, name, callback) {
            return callback();
          }
        };
        spy = sinon.spy(FileTransfer.prototype, "download");
        return this.service.downloadHabitatTiles(this.layer, (function(_this) {
          return function() {
            expect(spy.calledWith(_this.layer.url, "/User/Lieferschein/Documents/12-seagrass.mbtiles")).toBe(true);
            return done();
          };
        })(this));
      });
      return it("passes an error with the callback if the transfer is unsuccessful", function(done) {
        FileTransfer.prototype = {
          download: function(url, name, cb, errorcb) {
            return errorcb("ERRORORORORRORORO");
          }
        };
        return this.service.downloadHabitatTiles(this.layer, function(error) {
          expect(error).toBe("ERRORORORORRORORO");
          return done();
        });
      });
    });
    describe('.updateArea', function() {
      return it("sets the mbtiles attribute on the Area", function() {
        var area, expectedLayers, layers, newLayer, service;
        layers = [
          {
            habitat: 'mangroves'
          }, {
            habitat: 'seamarshsaltoves'
          }
        ];
        newLayer = {
          habitat: 'mangroves',
          tatibah: 'sevorgnam'
        };
        area = new BlueCarbon.Models.Area({
          id: 12,
          mbtiles: layers
        });
        sinon.stub(area, 'localSave');
        sinon.stub(Date.prototype, 'getTime', function() {
          return 1234567;
        });
        service = new DownloadService(area);
        service.updateArea(newLayer);
        expectedLayers = [
          {
            habitat: 'mangroves',
            tatibah: 'sevorgnam',
            downloadedAt: 1234567
          }, {
            habitat: 'seamarshsaltoves'
          }
        ];
        return expect(area.get('mbtiles')).toEqual(expectedLayers);
      });
    });
    describe(".downloadHabitats", function() {
      beforeEach(function() {
        this.layers = [
          {
            habitat: "seagrass",
            url: "http://seagrass.com/api/seagrass.json"
          }, {
            habitat: "mangroves",
            url: "https://mangroves.io/api/mangroves.json"
          }
        ];
        this.area = new BlueCarbon.Models.Area({
          id: 12,
          mbtiles: this.layers
        });
        this.service = new DownloadService(this.area);
        window.FileTransfer = function() {};
        return FileTransfer.prototype = {
          download: function(url, name, callback) {
            return callback();
          }
        };
      });
      return it("downloads the habitat layers", function(done, fail) {
        return this.service.downloadHabitats().then(done)["catch"](fail);
      });
    });
    return describe('.downloadBaseLayer', function() {
      beforeEach(function() {
        this.area = new BlueCarbon.Models.Area({
          id: 12
        });
        return this.service = new DownloadService(this.area);
      });
      it('resolves the promise if the tile saving is successful', function(done, fail) {
        var offlineLayer, stub;
        offlineLayer = {
          saveTiles: function() {}
        };
        stub = sinon.stub(offlineLayer, 'saveTiles', function(zoom, startcb, cb, errorcb) {
          return cb();
        });
        return this.service.downloadBaseLayer(offlineLayer).then(function() {
          expect(stub.called).toBe(true);
          return done();
        })["catch"](fail);
      });
      return it('rejects the promise if the tile saving is unsuccessful', function(done, fail) {
        var offlineLayer, stub;
        offlineLayer = {
          saveTiles: function() {}
        };
        stub = sinon.stub(offlineLayer, 'saveTiles', function(zoom, startcb, cb, errorcb) {
          return errorcb(new Error('ERRORORORO'));
        });
        return this.service.downloadBaseLayer(offlineLayer).then(fail)["catch"](function() {
          expect(stub.called).toBe(true);
          return done();
        });
      });
    });
  });

}).call(this);
