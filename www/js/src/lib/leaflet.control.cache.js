// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  L.Control.OfflineLayer = (function(_super) {
    __extends(OfflineLayer, _super);

    function OfflineLayer() {
      this.onCacheClick = __bind(this.onCacheClick, this);
      this.onClearClick = __bind(this.onClearClick, this);
      return OfflineLayer.__super__.constructor.apply(this, arguments);
    }

    OfflineLayer.prototype.initialize = function(offlineLayer) {
      this.offlineLayer = offlineLayer;
    };

    OfflineLayer.prototype.onAdd = function(map) {
      var controls;
      controls = L.DomUtil.create('div', 'control-button', this._container);
      this.cacheButton = L.DomUtil.create('input', 'cache-button', controls);
      this.cacheButton.setAttribute('type', "button");
      this.cacheButton.setAttribute('id', "Btn1");
      this.cacheButton.setAttribute('value', "Cache");
      L.DomEvent.addListener(this.cacheButton, 'click', this.onCacheClick, this);
      L.DomEvent.disableClickPropagation(this.cacheButton);
      this.clearButton = L.DomUtil.create('input', 'offlinemap-controls-clear-button', controls);
      this.clearButton.setAttribute('type', "button");
      this.clearButton.setAttribute('id', "clearBtn");
      this.clearButton.setAttribute('value', "Clear DB");
      L.DomEvent.addListener(this.clearButton, 'click', this.onClearClick, this);
      L.DomEvent.disableClickPropagation(this.clearButton);
      return controls;
    };

    OfflineLayer.prototype.onClearClick = function() {
      return this.offlineLayer.clearTiles((function(_this) {
        return function() {
          return alert('Cleared cache');
        };
      })(this), (function(_this) {
        return function(error) {
          alert('Could not clear cache');
          return console.log(error);
        };
      })(this));
    };

    OfflineLayer.prototype.onCacheClick = function() {
      var nbTiles;
      nbTiles = this.offlineLayer.calculateNbTiles(17);
      if (nbTiles < 10000) {
        console.log("Will be saving: " + nbTiles + " tiles");
        return this.offlineLayer.saveTiles(17, (function(_this) {
          return function() {
            return null;
          };
        })(this), (function(_this) {
          return function() {
            return alert('Saved cache');
          };
        })(this), (function(_this) {
          return function(error) {
            console.log(error);
            return alert('Could not save cache');
          };
        })(this));
      } else {
        return alert("You are trying to save " + nbTiles + " tiles. There is currently a limit of 10,000 tiles.");
      }
    };

    return OfflineLayer;

  })(L.Control);

}).call(this);
